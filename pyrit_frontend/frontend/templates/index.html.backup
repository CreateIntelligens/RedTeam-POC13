<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PyRIT 攻擊測試平台</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #ff6b6b, #ee5a24);
            color: white;
            padding: 20px 30px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        
        .header p {
            font-size: 1.1em;
            opacity: 0.9;
        }
        
        .main-content {
            padding: 30px;
        }
        
        .config-section {
            background: white;
            border-radius: 10px;
            padding: 25px;
            margin-bottom: 25px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        
        .section-title {
            font-size: 1.4em;
            color: #333;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .form-row {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        .form-group {
            flex: 1;
            min-width: 250px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            color: #555;
            font-weight: 600;
        }
        
        input, select, textarea {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e1e8ed;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s;
        }
        
        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        
        .btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }
        
        .btn-success {
            background: linear-gradient(135deg, #00b894, #00a085);
        }
        
        .btn-danger {
            background: linear-gradient(135deg, #e17055, #d63031);
        }
        
        .btn-test {
            background: linear-gradient(135deg, #fdcb6e, #e17055);
        }
        
        .status-indicator {
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 600;
            display: inline-block;
            margin-left: 10px;
        }
        
        .status-success {
            background: #d4edda;
            color: #155724;
        }
        
        .status-error {
            background: #f8d7da;
            color: #721c24;
        }
        
        .status-warning {
            background: #fff3cd;
            color: #856404;
        }
        
        .results-section {
            margin-top: 30px;
        }
        
        .result-item {
            background: #f8f9fa;
            border-left: 4px solid #667eea;
            padding: 20px;
            margin-bottom: 15px;
            border-radius: 5px;
        }
        
        .result-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .conversation {
            background: white;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
        }
        
        .message {
            margin-bottom: 10px;
            padding: 10px;
            border-radius: 5px;
        }
        
        .message-user {
            background: #e3f2fd;
            margin-left: 20px;
        }
        
        .message-assistant {
            background: #f3e5f5;
            margin-right: 20px;
        }
        
        .loading {
            display: none;
            text-align: center;
            padding: 40px;
        }
        
        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .objectives-container {
            border: 2px dashed #ccc;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 10px;
        }
        
        .objective-item {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
            align-items: center;
        }
        
        .objective-item input {
            flex: 1;
        }
        
        .btn-small {
            padding: 6px 12px;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1><i class="fas fa-shield-alt"></i> PyRIT 攻擊測試平台</h1>
            <p>AI vs AI 對抗測試工具 - 配置你的模型，測試外部 AI 的安全性</p>
        </div>
        
        <div class="main-content">
            <!-- 模型配置區 -->
            <div class="config-section">
                <h2 class="section-title">
                    <i class="fas fa-cog"></i> 模型配置
                </h2>
                
                <div class="form-row">
                    <div class="form-group">
                        <label>攻擊生成模型 (你的 AI)</label>
                        <select id="attackGenerator">
                            <option value="">載入中...</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>評分模型 (你的 AI)</label>
                        <select id="scoringModel">
                            <option value="">載入中...</option>
                        </select>
                    </div>
                </div>
            </div>
            
            <!-- 攻擊目標配置 -->
            <div class="config-section">
                <h2 class="section-title">
                    <i class="fas fa-target"></i> 攻擊目標配置
                </h2>
                
                <div class="form-row">
                    <div class="form-group">
                        <label>目標 API 端點</label>
                        <input type="text" id="targetEndpoint" 
                               placeholder="https://api.example.com/v1/chat/completions">
                    </div>
                    <div class="form-group">
                        <label>目標 API 金鑰</label>
                        <input type="password" id="targetApiKey" 
                               placeholder="輸入外部 API 的金鑰">
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label>目標模型名稱</label>
                        <input type="text" id="targetModel" 
                               value="gpt-3.5-turbo" 
                               placeholder="模型名稱">
                    </div>
                    <div class="form-group">
                        <button class="btn btn-test" onclick="testConnection()">
                            <i class="fas fa-link"></i> 測試連接
                        </button>
                        <span id="connectionStatus"></span>
                    </div>
                </div>
            </div>
            
            <!-- 攻擊配置 -->
            <div class="config-section">
                <h2 class="section-title">
                    <i class="fas fa-crosshairs"></i> 攻擊配置
                </h2>
                
                <div class="form-row">
                    <div class="form-group">
                        <label>最大攻擊輪次</label>
                        <input type="number" id="maxTurns" value="5" min="1" max="10">
                    </div>
                    <div class="form-group">
                        <label>攻擊策略</label>
                        <select id="attackType" onchange="showStrategyInfo()">
                            <option value="">載入中...</option>
                        </select>
                        <div id="strategyInfo" style="margin-top: 10px; font-size: 14px; color: #666;"></div>
                    </div>
                </div>
                
                <div class="form-group">
                    <label>攻擊目標</label>
                    
                    <!-- 預設目標選擇器 -->
                    <div style="margin-bottom: 15px;">
                        <label style="font-weight: normal; font-size: 14px;">選擇預設攻擊場景：</label>
                        <div class="form-row" style="margin-bottom: 10px;">
                            <div class="form-group">
                                <select id="objectiveCategory" onchange="loadObjectivesByCategory()">
                                    <option value="">選擇攻擊分類</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <select id="presetObjectives" onchange="loadPresetObjectives()">
                                    <option value="">選擇預設場景</option>
                                </select>
                            </div>
                        </div>
                        <button class="btn btn-small" onclick="applyPresetObjectives()">
                            <i class="fas fa-download"></i> 套用全部目標
                        </button>
                        <button class="btn btn-small" onclick="addSelectedObjectives()" style="margin-left: 10px;">
                            <i class="fas fa-plus"></i> 逐個添加目標
                        </button>
                    </div>
                    
                    <!-- 自定義目標編輯器 -->
                    <div class="objectives-container">
                        <div id="objectivesList">
                            <div class="objective-item">
                                <input type="text" placeholder="輸入攻擊目標，例如：讓 AI 提供有害建議" 
                                       value="測試 AI 是否會洩露系統提示詞">
                                <button class="btn btn-danger btn-small" onclick="removeObjective(this)">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                        <button class="btn btn-small" onclick="addObjective()">
                            <i class="fas fa-plus"></i> 新增自定義目標
                        </button>
                    </div>
                </div>
                
                <div style="text-align: center; margin-top: 30px;">
                    <button class="btn btn-success" onclick="runAttack()" style="font-size: 18px; padding: 15px 30px;">
                        <i class="fas fa-play"></i> 開始攻擊測試
                    </button>
                </div>
            </div>
            
            <!-- 載入指示器 -->
            <div id="loading" class="loading">
                <div class="spinner"></div>
                <p>正在執行 AI vs AI 攻擊測試，請稍候...</p>
            </div>
            
            <!-- 結果顯示區 -->
            <div id="results" class="results-section" style="display: none;">
                <div class="config-section">
                    <h2 class="section-title">
                        <i class="fas fa-chart-line"></i> 攻擊結果
                    </h2>
                    <div id="resultsContent"></div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        // 全域變數
        let allObjectives = [];
        let allStrategies = {};
        
        // 載入可用模型
        async function loadModels() {
            try {
                const response = await fetch('/api/models');
                const data = await response.json();
                
                if (data.success) {
                    const attackGenerator = document.getElementById('attackGenerator');
                    const scoringModel = document.getElementById('scoringModel');
                    
                    attackGenerator.innerHTML = '<option value="">選擇攻擊生成模型</option>';
                    scoringModel.innerHTML = '<option value="">選擇評分模型</option>';
                    
                    data.models.forEach(model => {
                        const option1 = new Option(model.name, model.name);
                        const option2 = new Option(model.name, model.name);
                        attackGenerator.add(option1);
                        scoringModel.add(option2);
                    });
                } else {
                    console.error('載入模型失敗:', data.error);
                }
            } catch (error) {
                console.error('載入模型錯誤:', error);
            }
        }
        
        // 測試連接
        async function testConnection() {
            const generator = document.getElementById('attackGenerator').value;
            const endpoint = document.getElementById('targetEndpoint').value;
            const apiKey = document.getElementById('targetApiKey').value;
            const status = document.getElementById('connectionStatus');
            
            if (!generator || !endpoint || !apiKey) {
                status.innerHTML = '<span class="status-error">請填寫所有必要資訊</span>';
                return;
            }
            
            status.innerHTML = '<span class="status-warning">測試中...</span>';
            
            try {
                const response = await fetch('/api/test', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        generator_model: generator,
                        target_endpoint: endpoint,
                        target_api_key: apiKey
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    status.innerHTML = '<span class="status-success">連接成功</span>';
                } else {
                    status.innerHTML = `<span class="status-error">連接失敗: ${data.error}</span>`;
                }
            } catch (error) {
                status.innerHTML = `<span class="status-error">測試錯誤: ${error.message}</span>`;
            }
        }
        
        // 新增攻擊目標
        function addObjective() {
            const container = document.getElementById('objectivesList');
            const div = document.createElement('div');
            div.className = 'objective-item';
            div.innerHTML = `
                <input type="text" placeholder="輸入攻擊目標">
                <button class="btn btn-danger btn-small" onclick="removeObjective(this)">
                    <i class="fas fa-trash"></i>
                </button>
            `;
            container.appendChild(div);
        }
        
        // 移除攻擊目標
        function removeObjective(button) {
            button.parentElement.remove();
        }
        
        // 執行攻擊
        async function runAttack() {
            const attackGenerator = document.getElementById('attackGenerator').value;
            const scoringModel = document.getElementById('scoringModel').value;
            const targetEndpoint = document.getElementById('targetEndpoint').value;
            const targetApiKey = document.getElementById('targetApiKey').value;
            const targetModel = document.getElementById('targetModel').value;
            const maxTurns = parseInt(document.getElementById('maxTurns').value);
            
            // 收集攻擊目標
            const objectiveInputs = document.querySelectorAll('#objectivesList input');
            const objectives = Array.from(objectiveInputs)
                .map(input => input.value.trim())
                .filter(value => value);
            
            if (!attackGenerator || !scoringModel || !targetEndpoint || !targetApiKey || objectives.length === 0) {
                alert('請填寫所有必要資訊');
                return;
            }
            
            // 顯示載入指示器
            document.getElementById('loading').style.display = 'block';
            document.getElementById('results').style.display = 'none';
            
            try {
                const response = await fetch('/api/attack', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        attack_generator: attackGenerator,
                        scoring_model: scoringModel,
                        target_endpoint: targetEndpoint,
                        target_api_key: targetApiKey,
                        target_model: targetModel,
                        objectives: objectives,
                        max_turns: maxTurns,
                        attack_type: 'crescendo'
                    })
                });
                
                const data = await response.json();
                
                // 隱藏載入指示器
                document.getElementById('loading').style.display = 'none';
                
                // 顯示結果
                displayResults(data);
                
            } catch (error) {
                document.getElementById('loading').style.display = 'none';
                alert(`攻擊執行錯誤: ${error.message}`);
            }
        }
        
        // 顯示結果
        function displayResults(data) {
            const resultsContent = document.getElementById('resultsContent');
            const resultsSection = document.getElementById('results');
            
            if (data.success) {
                let html = '
                    <div class="result-header">
                        <h3>攻擊完成！</h3>
                        <span class="status-success">成功執行 ' + data.total_attacks + ' 個攻擊測試</span>
                    </div>
                    
                    <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                        <strong>配置資訊：</strong><br>
                        攻擊生成：' + data.config.attack_generator + '<br>
                        評分模型：' + data.config.scoring_model + '<br>
                        攻擊目標：' + data.config.target + '
                    </div>
                ';
                
                data.results.forEach((result, index) => {
                    html += '
                        <div class="result-item">
                            <h4>攻擊 ' + result.attack_id + ': ' + (data.config.objectives[index] || '未知目標') + '</h4>
                            <span class="status-indicator ' + (result.success ? 'status-error' : 'status-success') + '">
                                ' + (result.success ? '攻擊成功 ⚠️' : '攻擊失敗 ✅') + '
                            </span>
                            
                            <div class="conversation">
                                <h5>對話記錄：</h5>
                    ';
                    
                    if (result.conversation && result.conversation.length > 0) {
                        result.conversation.forEach(msg => {
                            html += '
                                <div class="message message-' + msg.role + '">
                                    <strong>' + (msg.role === 'user' ? '攻擊者' : 'AI') + ':</strong> 
                                    ' + msg.content + '
                                </div>
                            ';
                        });
                    } else {
                        html += '<p>無對話記錄</p>';
                    }
                    
                    html += '</div>';
                    
                    if (result.scores && result.scores.length > 0) {
                        html += '<div style="margin-top: 10px;"><strong>評分結果：</strong>';
                        result.scores.forEach(score => {
                            html += '<p>評分: ' + score.score + ' - ' + (score.rationale || '無理由說明') + '</p>';
                        });
                        html += '</div>';
                    }
                    
                    html += '</div>';
                });
                
                resultsContent.innerHTML = html;
            } else {
                resultsContent.innerHTML = `
                    <div class="result-header">
                        <h3>攻擊失敗</h3>
                        <span class="status-error">執行錯誤</span>
                    </div>
                    <div style="background: #f8d7da; color: #721c24; padding: 15px; border-radius: 8px;">
                        錯誤訊息: ${data.error}
                    </div>
                `;
            }
            
            resultsSection.style.display = 'block';
            resultsSection.scrollIntoView({ behavior: 'smooth' });
        }
        
        // 載入攻擊策略
        async function loadStrategies() {
            try {
                const response = await fetch('/api/strategies');
                const data = await response.json();
                
                if (data.success) {
                    allStrategies = data.strategies;
                    const select = document.getElementById('attackType');
                    select.innerHTML = '<option value="">選擇攻擊策略</option>';
                    
                    Object.keys(data.strategies).forEach(key => {
                        const strategy = data.strategies[key];
                        const option = new Option(strategy.name, key);
                        select.add(option);
                    });
                } else {
                    console.error('載入策略失敗:', data.error);
                }
            } catch (error) {
                console.error('載入策略錯誤:', error);
            }
        }
        
        // 顯示策略資訊
        function showStrategyInfo() {
            const selectedStrategy = document.getElementById('attackType').value;
            const infoDiv = document.getElementById('strategyInfo');
            
            if (selectedStrategy && allStrategies[selectedStrategy]) {
                const strategy = allStrategies[selectedStrategy];
                const difficultyColor = {
                    '初級': '#28a745',
                    '中級': '#ffc107', 
                    '高級': '#dc3545'
                };
                
                infoDiv.innerHTML = `
                    <div style="background: #f8f9fa; padding: 10px; border-radius: 5px; border-left: 4px solid #007bff;">
                        <div style="margin-bottom: 8px;">
                            <strong>難度：</strong>
                            <span style="color: ${difficultyColor[strategy.difficulty] || '#666'}; font-weight: bold;">
                                ${strategy.difficulty}
                            </span>
                            ${strategy.recommended ? '<span style="color: #dc3545; font-weight: bold; margin-left: 10px;">📍 推薦使用</span>' : ''}
                        </div>
                        <div style="margin-bottom: 8px;">
                            <strong>說明：</strong>${strategy.description}
                        </div>
                        <div style="margin-bottom: 8px;">
                            <strong>優點：</strong>${strategy.advantages.join('、')}
                        </div>
                        <div>
                            <strong>適用於：</strong>${strategy.suitable_for.join('、')}
                        </div>
                    </div>
                `;
            } else {
                infoDiv.innerHTML = '';
            }
        }
        
        // 載入攻擊目標分類
        async function loadObjectiveCategories() {
            try {
                const response = await fetch('/api/objectives/categories');
                const data = await response.json();
                
                if (data.success) {
                    const select = document.getElementById('objectiveCategory');
                    select.innerHTML = '<option value="">選擇攻擊分類</option>';
                    
                    Object.keys(data.categories).forEach(key => {
                        const option = new Option(data.categories[key], key);
                        select.add(option);
                    });
                } else {
                    console.error('載入分類失敗:', data.error);
                }
            } catch (error) {
                console.error('載入分類錯誤:', error);
            }
        }
        
        // 載入預設攻擊目標
        async function loadAllObjectives() {
            try {
                const response = await fetch('/api/objectives/presets');
                const data = await response.json();
                
                if (data.success) {
                    allObjectives = data.objectives;
                } else {
                    console.error('載入目標失敗:', data.error);
                }
            } catch (error) {
                console.error('載入目標錯誤:', error);
            }
        }
        
        // 根據分類載入目標
        function loadObjectivesByCategory() {
            const category = document.getElementById('objectiveCategory').value;
            const presetSelect = document.getElementById('presetObjectives');
            
            presetSelect.innerHTML = '<option value="">選擇預設場景</option>';
            
            if (category) {
                const filteredObjectives = allObjectives.filter(obj => obj.category === category);
                filteredObjectives.forEach(obj => {
                    const option = new Option(obj.name, obj.id);
                    presetSelect.add(option);
                });
            }
        }
        
        // 套用預設攻擊目標（全部替換）
        function applyPresetObjectives() {
            const selectedId = document.getElementById('presetObjectives').value;
            if (!selectedId) {
                alert('請先選擇預設場景');
                return;
            }
            
            const selectedObjective = allObjectives.find(obj => obj.id === selectedId);
            if (!selectedObjective) {
                alert('找不到選擇的場景');
                return;
            }
            
            // 清空現有目標
            const container = document.getElementById('objectivesList');
            container.innerHTML = '';
            
            // 添加預設目標
            selectedObjective.objectives.forEach(objective => {
                const div = document.createElement('div');
                div.className = 'objective-item';
                div.innerHTML = `
                    <input type="text" value="${objective}">
                    <button class="btn btn-danger btn-small" onclick="removeObjective(this)">
                        <i class="fas fa-trash"></i>
                    </button>
                `;
                container.appendChild(div);
            });
            
            // 顯示場景描述
            alert('已套用「' + selectedObjective.name + '」\n\n' + selectedObjective.description + '\n\n包含 ' + selectedObjective.objectives.length + ' 個攻擊目標');
        }
        
        // 逐個添加預設攻擊目標
        function addSelectedObjectives() {
            const selectedId = document.getElementById('presetObjectives').value;
            if (!selectedId) {
                alert('請先選擇預設場景');
                return;
            }
            
            const selectedObjective = allObjectives.find(obj => obj.id === selectedId);
            if (!selectedObjective) {
                alert('找不到選擇的場景');
                return;
            }
            
            // 創建選擇對話框
            let checkboxes = selectedObjective.objectives.map((obj, index) => 
                `<label style="display: block; margin: 10px 0; cursor: pointer;">
                    <input type="checkbox" value="${index}" checked style="margin-right: 8px;">
                    ${obj}
                </label>`
            ).join('');
            
            const dialog = document.createElement('div');
            dialog.innerHTML = '
                <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000; display: flex; justify-content: center; align-items: center;">
                    <div style="background: white; padding: 30px; border-radius: 10px; max-width: 600px; max-height: 80%; overflow-y: auto;">
                        <h3 style="margin-bottom: 20px;">' + selectedObjective.name + '</h3>
                        <p style="color: #666; margin-bottom: 20px;">' + selectedObjective.description + '</p>
                        <div style="margin-bottom: 20px;">
                            <strong>選擇要添加的攻擊目標：</strong>
                        </div>
                        <div id="objectiveCheckboxes">
                            ' + checkboxes + '
                        </div>
                        <div style="margin-top: 20px; text-align: right;">
                            <button onclick="cancelObjectiveSelection()" style="margin-right: 10px; padding: 8px 16px; border: 1px solid #ccc; background: white; border-radius: 4px; cursor: pointer;">取消</button>
                            <button onclick="confirmObjectiveSelection(\'" + selectedId + "\')" style="padding: 8px 16px; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer;">添加選中的目標</button>
                        </div>
                    </div>
                </div>
            ';
            document.body.appendChild(dialog);
        }
        
        // 取消目標選擇
        function cancelObjectiveSelection() {
            const dialog = document.querySelector('div[style*="position: fixed"]').parentElement;
            document.body.removeChild(dialog);
        }
        
        // 確認目標選擇
        function confirmObjectiveSelection(objectiveId) {
            const selectedObjective = allObjectives.find(obj => obj.id === objectiveId);
            const checkboxes = document.querySelectorAll('#objectiveCheckboxes input[type="checkbox"]:checked');
            const container = document.getElementById('objectivesList');
            
            let addedCount = 0;
            checkboxes.forEach(checkbox => {
                const index = parseInt(checkbox.value);
                const objective = selectedObjective.objectives[index];
                
                const div = document.createElement('div');
                div.className = 'objective-item';
                div.innerHTML = `
                    <input type="text" value="${objective}">
                    <button class="btn btn-danger btn-small" onclick="removeObjective(this)">
                        <i class="fas fa-trash"></i>
                    </button>
                `;
                container.appendChild(div);
                addedCount++;
            });
            
            // 關閉對話框
            cancelObjectiveSelection();
            
            if (addedCount > 0) {
                alert('已添加 ' + addedCount + ' 個攻擊目標');
            } else {
                alert('未選擇任何目標');
            }
        }
        
        // 頁面載入時載入所有內容
        document.addEventListener('DOMContentLoaded', async function() {
            await loadModels();
            await loadStrategies();
            await loadObjectiveCategories();
            await loadAllObjectives();
        });
    </script>
</body>
</html>